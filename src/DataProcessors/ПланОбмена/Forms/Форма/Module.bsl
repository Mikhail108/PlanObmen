
&НаСервере
Процедура СброситьВсеЗарегестрированныеНаСервере()
	
	Узлы = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбменМеждуСистемамиБронирования.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ОбменМеждуСистемамиБронирования КАК ОбменМеждуСистемамиБронирования
	               |ГДЕ
	               |	НЕ ОбменМеждуСистемамиБронирования.ЭтотУзел";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Узлы.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Объекты = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Бронирование.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.Бронирование КАК Бронирование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объекты.Добавить(Выборка.Ссылка);
	КонецЦикла;  
	
	ПланыОбмена.УдалитьРегистрациюИзменений(Узлы, Объекты);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВсеЗарегестрированные(Команда)
	СброситьВсеЗарегестрированныеНаСервере();
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДанныеНаСервере()
	
	Поток = Новый ПотокВПамяти;
	
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьПоток(Поток);
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(Запись, Получатель);
	Выборка = ПланыОбмена.ВыбратьИзменения(Получатель, ЗаписьСообщения.НомерСообщения);
	Пока Выборка.Следующий() Цикл
		Данные = Выборка.Получить();
    	ЗаписатьXML(Запись, Данные);
	КонецЦикла;	
	ЗаписьСообщения.ЗакончитьЗапись();
	
	Запись.Закрыть();
	
	Возврат ПоместитьВоВременноеХранилище(Поток.ЗакрытьИПолучитьДвоичныеДанные());
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьДанные(Команда) 
	
	Если Получатель.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Получатель должен быть заполенен";
		Сообщение.Поле = "Получатель";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	АдресДанных = ВыгрузитьДанныеНаСервере();
	
	ПараметрыДиалога = Новый ПараметрыДиалогаПолученияФайлов;
	
	ПолучитьФайлССервераАсинх(АдресДанных, "Выгрузка.xml", ПараметрыДиалога);
	СоздатьАрхивZIP();

КонецПроцедуры

Процедура СоздатьАрхивZIP()

	// Создадим объект записи ZIP-архива
	ЗаписьZIP = Новый ЗаписьZipФайла("C:\Учеба\База.zip",
					" ",
					" ",
					МетодСжатияZIP.Сжатие,
					УровеньСжатияZIP.Максимальный,
					МетодШифрованияZIP.Zip20);
	
	// Добавим необходимые файлы в архив
	ЗаписьZIP.Добавить("c:\Учеба\Выгрузка.xml", РежимСохраненияПутейZIP.НеСохранятьПути);
		
	// Запишем архив на диск
	ЗаписьZIP.Записать();

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(АдресВременногоХранилища)
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	ДанныеДляОбмена.Прочитать(ДанныеФайла.ОткрытьПотокДляЧтения(), КодировкаТекста.UTF8);
	
	КоличествоСтрок = ДанныеДляОбмена.КоличествоСтрок();
	
	РежимРаботы = "ПоискОбъекта";
	
	Для Сч = 1 По КоличествоСтрок Цикл
		
		Строка = ДанныеДляОбмена.ПолучитьСтроку(Сч);
		
		МассивДанных = СтрРазделить(Строка, ",");
		
		Если  СокрЛП((МассивДанных[0])) = "Начало: ТипНомеров" Тогда
		
			Идентификатор = МассивДанных[2];
			
			Ссылка = Справочники.ТипНомера.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
			ЭлементТипНомера = Ссылка.ПолучитьОбъект();
			
			Если ЭлементТипНомера = Неопределено Тогда					
				ЭлементТипНомера = Справочники.ТипНомера.СоздатьЭлемент();
				ЭлементТипНомера.УстановитьСсылкуНового(Ссылка);
			КонецЕсли;
			
			ЭлементТипНомера.Наименование = СокрЛП((МассивДанных[1]));
			
			ЭлементТипНомера.Записать();
		КонецЕсли;
		
		Если  СокрЛП((МассивДанных[0])) = "Начало: Постояльцы" Тогда
			
			Идентификатор = МассивДанных[4];
			
			Ссылка = Справочники.Постоялец.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
			
			ЭлементПостояльцы = Ссылка.ПолучитьОбъект();
			
			Если ЭлементПостояльцы = Неопределено Тогда					
				ЭлементПостояльцы = Справочники.Постоялец.СоздатьЭлемент();
				ЭлементПостояльцы.УстановитьСсылкуНового(Ссылка);
			КонецЕсли;
			
			ЭлементПостояльцы.Наименование = СокрЛП((МассивДанных[1]));
			ЭлементПостояльцы.Пол = Перечисления.Пол[СокрЛП((МассивДанных[2]))];
			ЭлементПостояльцы.ДатаРождения = ПрочитатьДатуJSON(СокрЛП((МассивДанных[3])), ФорматДатыJSON.ISO);
			
			ЭлементПостояльцы.Записать();
		КонецЕсли;
		
		Если  СокрЛП((МассивДанных[0])) = "Начало: Бронирование" Тогда
			ЭлементБронирование = Документы.Бронирование.СоздатьДокумент();
			
			ЭлементБронирование.Дата = ТекущаяДатаСеанса();
			ЭлементБронирование.ДатаЗаезда = ПрочитатьДатуJSON(СокрЛП((МассивДанных[1])), ФорматДатыJSON.ISO);
			ЭлементБронирование.ДатаВыезда = ПрочитатьДатуJSON(СокрЛП((МассивДанных[2])), ФорматДатыJSON.ISO);
			ЭлементБронирование.ТипНомера = Справочники.ТипНомера.ПолучитьСсылку(Новый УникальныйИдентификатор((МассивДанных[3])));
			
			Строка = ЭлементБронирование.Постояльцы.Добавить();
			Строка.Постоялец = Справочники.Постоялец.ПолучитьСсылку(Новый УникальныйИдентификатор((МассивДанных[4])));
			
			ЭлементБронирование.Записать();
		КонецЕсли;
	
	КонецЦикла;
	
	//ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	
	//Чтение = Новый ЧтениеXML;
	//Чтение.ОткрытьПоток(ДвоичныеДанные.ОткрытьПотокДляЧтения());  
	
	//ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	//ЧтениеСообщения.НачатьЧтение(Чтение, ДопустимыйНомерСообщения.Очередной);
	
	//Пока ВозможностьЧтенияXML(Чтение) Цикл
	//	Данные = ПрочитатьXML(Чтение);
	//	Если ТипЗнч(Данные) = Тип("ДокументОбъект.Бронирование") Тогда
	//		Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
	//	КонецЕсли;
	//	Данные.ОбменДанными.Загрузка = Истина;
	//	Данные.Записать(); 
	//КонецЦикла;
	
	//ЧтениеСообщения.ЗакончитьЧтение();
	
	//Чтение.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьДанные(Команда)
	
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
	ПараметрыДиалога.Фильтр = "Файл выгрузки (*.csv)|*.csv";
	
	Результат = Ждать ПоместитьФайлНаСерверАсинх(,,, ПараметрыДиалога);
	
	Если Результат = Неопределено Тогда  
		Возврат;	
	КонецЕсли; 
	
	Если Результат.ПомещениеФайлаОтменено Тогда  
		Возврат;	
	КонецЕсли; 
	
	ЗагрузитьДанныеНаСервере(Результат.Адрес); 
	
	ПоказатьОповещениеПользователя("Данные загружены");
	
КонецПроцедуры

&НаСервере
Функция ВыгрузкаНаСервере()
	
	ДанныеДляОбмена.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыНомеров.Ссылка,
		|	ТипыНомеров.Наименование,
		|	ТипыНомеров.Количество,
		|	ТипыНомеров.Цена,
		|	ТипыНомеров.Описание
		|ИЗ
		|	Справочник.ТипыНомеров КАК ТипыНомеров";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеДляОбмена.ДобавитьСтроку("Начало: ТипНомера");
		
		ДанныеДляОбмена.ДобавитьСтроку(Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		ДанныеДляОбмена.ДобавитьСтроку(Выборка.Наименование);
		
		ДанныеДляОбмена.ДобавитьСтроку("Конец: ТипНомера");
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Постояльцы.Ссылка,
		|	Постояльцы.Наименование,
		|	Постояльцы.Телефон,
		|	Постояльцы.АдресЭлектроннойПочты,
		|	Постояльцы.Пол,
		|	Постояльцы.ДатаРождения
		|ИЗ
		|	Справочник.Постояльцы КАК Постояльцы";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеДляОбмена.ДобавитьСтроку("Начало: Постояльцы");
		
		ДанныеДляОбмена.ДобавитьСтроку(Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		ДанныеДляОбмена.ДобавитьСтроку(Выборка.Наименование);
		ДанныеДляОбмена.ДобавитьСтроку(Строка(Выборка.Пол));
		ДанныеДляОбмена.ДобавитьСтроку(ЗаписатьДатуJSON(Выборка.ДатаРождения, ФорматДатыJSON.ISO));
		
		ДанныеДляОбмена.ДобавитьСтроку("Конец: Постояльцы");
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Бронирование.Ссылка,
		|	Бронирование.ДатаЗаезда,
		|	Бронирование.ДатаВыезда,
		|	Бронирование.ТипНомера
		|ИЗ
		|	Документ.Бронирование КАК Бронирование";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеДляОбмена.ДобавитьСтроку("Начало: Бронирование");
		
		ДанныеДляОбмена.ДобавитьСтроку(Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		ДанныеДляОбмена.ДобавитьСтроку(ЗаписатьДатуJSON(Выборка.ДатаЗаезда, ФорматДатыJSON.ISO));
		ДанныеДляОбмена.ДобавитьСтроку(ЗаписатьДатуJSON(Выборка.ДатаВыезда, ФорматДатыJSON.ISO));
		ДанныеДляОбмена.ДобавитьСтроку(Строка(Выборка.ТипНомера.УникальныйИдентификатор()));
		
		ДанныеДляОбмена.ДобавитьСтроку("Конец: Бронирование");
		
	КонецЦикла;
	
	Поток = Новый ПотокВПамяти();
	
	ДанныеДляОбмена.Записать(Поток);
	
	ДанныеФайла = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	Адрес = ПоместитьВоВременноеХранилище(ДанныеФайла);
	
	Возврат Адрес;
	
КонецФункции
